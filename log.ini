//
//  RadarBleManager.m
//

#import "RadarBleManager.h"
#import <CoreBluetooth/CoreBluetooth.h>

// 日志宏定义
#define RDRLOG(fmt, ...) NSLog((@"[RadarBleManager] " fmt), ##__VA_ARGS__)

// 默认超时常量
#define DEFAULT_SCAN_TIMEOUT 10.0
#define DEFAULT_CONFIG_TIMEOUT 30.0
#define DEFAULT_CONNECT_TIMEOUT 10.0
#define DEFAULT_QUERY_TIMEOUT 20.0
#define DEFAULT_COMMAND_DELAY 1.0 // 延迟执行命令的时间

@interface RadarBleManager() <CBCentralManagerDelegate, BlufiDelegate>

// SDK managers
@property (nonatomic, strong) BlufiClient *blufiClient;
@property (nonatomic, strong) CBCentralManager *centralManager;

// Status and callbacks
@property (nonatomic, copy) RadarScanCallback scanCallback;
@property (nonatomic, copy) RadarConfigCallback configCallback;
@property (nonatomic, copy) RadarStatusCallback statusCallback;
@property (nonatomic, copy) void(^connectCallback)(BOOL success);

// Device tracking
@property (nonatomic, strong) DeviceInfo *currentDevice;
@property (nonatomic, copy) NSString *currentDeviceUUID;
@property (nonatomic, strong) CBPeripheral *currentPeripheral;
@property (nonatomic, strong) NSMutableDictionary<NSString *, CBPeripheral *> *peripheralCache;
@property (nonatomic, strong) NSMutableDictionary *statusMap; 

// State flags
@property (nonatomic, assign) BOOL isScanning;
@property (nonatomic, assign) BOOL isConnected;
@property (nonatomic, assign) BOOL isConfiguring;
@property (nonatomic, assign) BOOL isQuerying;

// Timers
@property (nonatomic, strong) NSTimer *scanTimer;
@property (nonatomic, strong) NSTimer *configTimer;
@property (nonatomic, strong) NSTimer *connectTimer;
@property (nonatomic, strong) NSTimer *queryTimer; 

// 查询状态控制
@property (nonatomic, assign) BOOL isQueryComplete;
@property (nonatomic, assign) BOOL hasWifiStatus;
@property (nonatomic, assign) BOOL hasUID;
@property (nonatomic, assign) BOOL hasMacAddress; 

// 与服务器配置相关的属性
@property (nonatomic, strong) NSMutableDictionary *configServerResult;
@property (nonatomic, assign) NSInteger configRetryCount;
@property (nonatomic, assign) NSInteger configServerSendStage;
@property (nonatomic, copy) NSString *serverAddress;
@property (nonatomic, assign) NSInteger serverPort;
@property (nonatomic, copy) NSString *serverProtocol;
@property (nonatomic, copy) NSString *wifiSsid;
@property (nonatomic, copy) NSString *wifiPassword;

// 过滤属性
@property (nonatomic, copy) NSString *currentFilterPrefix;
@property (nonatomic, assign) FilterType currentFilterType;

// 错误处理
@property (nonatomic, assign) NSInteger errorCount;
@property (nonatomic, copy) void(^errorCallback)(RadarBleErrorType errorType, NSString *errorMessage);

@end

@implementation RadarBleManager

#pragma mark - 初始化和单例方法

// 单例方法
+ (instancetype)sharedManager {
    static RadarBleManager *instance = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        instance = [[RadarBleManager alloc] init];
    });
    return instance;
}

// 初始化方法
- (instancetype)init {
    self = [super init];
    if (self) {
        // 初始化BlufiClient
        _blufiClient = nil;
        
        // 初始化Central Manager
        _centralManager = [[CBCentralManager alloc] initWithDelegate:self queue:nil];
        
        // 初始化属性
        _peripheralCache = [NSMutableDictionary dictionary];
        _statusMap = [NSMutableDictionary dictionary];
        _configServerResult = [NSMutableDictionary dictionary];
        
        // 初始化状态标志
        _isScanning = NO;
        _isConnected = NO;
        _isConfiguring = NO;
        _isQuerying = NO;
        _isQueryComplete = NO;
        _errorCount = 0;
        _configRetryCount = 0;
        _configServerSendStage = 0;
        
        // 设置默认过滤类型
        _currentFilterType = FilterTypeDeviceName;
    }
    return self;
}

// 资源释放方法
- (void)dealloc {
    RDRLOG(@"Releasing RadarBleManager resources");
    
    // 停止所有操作
    [self stopScan];
    [self disconnect];
    
    // 取消定时器
    [_scanTimer invalidate];
    [_configTimer invalidate];
    [_connectTimer invalidate];
    [_queryTimer invalidate];
    
    // 清空回调
    _scanCallback = nil;
    _configCallback = nil;
    _statusCallback = nil;
    _errorCallback = nil;
    
    // 清理BlufiClient
    if (_blufiClient) {
        _blufiClient.blufiDelegate = nil;
        _blufiClient.centralManagerDelete = nil;
        _blufiClient.peripheralDelegate = nil;
        [_blufiClient close];
        _blufiClient = nil;
    }
}

#pragma mark - 错误处理

// 设置错误回调
- (void)setErrorCallback:(void (^)(RadarBleErrorType, NSString *))callback {
    _errorCallback = callback;
    RDRLOG(@"Error callback set successfully");
}

// 重置错误计数
- (void)resetErrorCount {
    _errorCount = 0;
}

#pragma mark - 扫描方法

// 设置扫描回调
- (void)setScanCallback:(RadarScanCallback)callback {
    _scanCallback = callback;
    RDRLOG(@"Scan callback set successfully");
}

// 开始扫描，使用默认参数
- (void)startScan {
    [self startScanWithTimeout:DEFAULT_SCAN_TIMEOUT 
               filterPrefix:nil 
                 filterType:FilterTypeDeviceName];
}

// 开始扫描，指定超时时间、过滤前缀和过滤类型
- (void)startScanWithTimeout:(NSTimeInterval)timeout 
               filterPrefix:(nullable NSString *)filterPrefix 
                 filterType:(FilterType)filterType {
    if (_isScanning) {
        RDRLOG(@"Scan already in progress, ignoring request");
        return;
    }
    
    // 保存过滤参数
    _currentFilterPrefix = filterPrefix;
    _currentFilterType = filterType;
    
    // 检查蓝牙状态
    if (_centralManager.state != CBManagerStatePoweredOn) {
        RDRLOG(@"Bluetooth not enabled, delay rescan");
        __weak typeof(self) weakSelf = self;
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
            __strong typeof(weakSelf) strongSelf = weakSelf;
            if (!strongSelf) return;
            
            if (strongSelf.centralManager.state == CBManagerStatePoweredOn) {
                RDRLOG(@"After delay, Bluetooth is ready, starting scan");
                [strongSelf startActualScan:timeout];
            } else {
                if (strongSelf.errorCallback) {
                    strongSelf.errorCallback(RadarBleErrorBluetoothDisabled, @"Bluetooth is disabled");
                }
            }
        });
        return;
    }
    
    // 蓝牙已启用，直接开始扫描
    [self startActualScan:timeout];
}
    
// 实际开始扫描的内部方法
- (void)startActualScan:(NSTimeInterval)timeout {
    RDRLOG(@"Starting scan: timeout=%.1fs, filter=%@, type=%ld", 
           timeout, _currentFilterPrefix ?: @"None", (long)_currentFilterType);
    
    // 设置扫描标志
    _isScanning = YES;
    
    // 设置扫描超时计时器
    _scanTimer = [NSTimer scheduledTimerWithTimeInterval:timeout
                                                  target:self
                                                selector:@selector(scanTimedOut)
                                                userInfo:nil
                                                 repeats:NO];
    
    // 开始扫描
    NSDictionary *options = @{CBCentralManagerScanOptionAllowDuplicatesKey: @NO};
    [_centralManager scanForPeripheralsWithServices:nil options:options];
}

// 停止扫描
- (void)stopScan {
    if (!_isScanning) {
        return;
    }
    
    RDRLOG(@"Stopping scan");
    
    // 停止蓝牙扫描
    [_centralManager stopScan];
    
    // 取消超时计时器
    [_scanTimer invalidate];
    _scanTimer = nil;
    
    _isScanning = NO;
}

// 扫描超时处理
- (void)scanTimedOut {
    RDRLOG(@"Scan timed out");
    [self stopScan];
}

#pragma mark - 设备连接管理

// 设置当前设备
- (void)setCurrentDevice:(DeviceInfo *)device {
    if (!device || !device.uuid) {
        RDRLOG(@"Error: Invalid device information");
        if (_errorCallback) {
            _errorCallback(RadarBleErrorInvalidParameter, @"Invalid device information");
        }
        return;
    }
    
    // 保存设备信息
    _currentDevice = device;
    _currentDeviceUUID = device.uuid;
    
    // 查找peripheral对象
    CBPeripheral *peripheral = nil;
    @synchronized(_peripheralCache) {
        peripheral = [_peripheralCache objectForKey:device.uuid];
    }
    
    if (peripheral) {
        RDRLOG(@"Found peripheral for device: %@, UUID: %@", device.deviceName, device.uuid);
        _currentPeripheral = peripheral;
    } else {
        RDRLOG(@"Warning: No peripheral found for device UUID: %@", device.uuid);
        _currentPeripheral = nil;
    }
}

// 连接设备
- (void)connectDevice:(DeviceInfo *)device {
    if (!device || !device.uuid) {
        RDRLOG(@"Error: Invalid device or missing UUID");
        if (_errorCallback) {
            _errorCallback(RadarBleErrorInvalidParameter, @"Invalid device information");
        }
        return;
    }
    
    RDRLOG(@"Connecting to device: %@, UUID: %@", device.deviceName, device.uuid);
    
    // 如果已连接到其他设备，先断开
    if (_isConnected && _blufiClient && 
        ![_currentDeviceUUID isEqualToString:device.uuid]) {
        [self disconnect];
    }
    
    // 保存设备信息
    _currentDevice = device;
    _currentDeviceUUID = device.uuid;
    
    // 查找peripheral对象
    CBPeripheral *peripheral = nil;
    @synchronized(_peripheralCache) {
        peripheral = [_peripheralCache objectForKey:device.uuid];
    }
    
    if (peripheral) {
        RDRLOG(@"Found peripheral for UUID: %@", device.uuid);
        _currentPeripheral = peripheral;
        
        // 创建BlufiClient并连接
        if (!_blufiClient) {
            _blufiClient = [[BlufiClient alloc] init];
            _blufiClient.blufiDelegate = self;
            _blufiClient.centralManagerDelete = self;
            _blufiClient.peripheralDelegate = self;
            _blufiClient.postPackageLengthLimit = 128;
        }
        
        // 连接设备
        [_blufiClient connect:device.uuid];
        _isConnected = YES;
        
        // 设置连接超时
        _connectTimer = [NSTimer scheduledTimerWithTimeInterval:DEFAULT_CONNECT_TIMEOUT
                                                        target:self
                                                      selector:@selector(connectionTimedOut)
                                                      userInfo:nil
                                                       repeats:NO];
    } else {
        RDRLOG(@"Error: No peripheral found for UUID: %@", device.uuid);
        if (_errorCallback) {
            _errorCallback(RadarBleErrorDeviceNotFound, @"Device not found in cache");
        }
    }
}

// 连接超时处理
- (void)connectionTimedOut {
    RDRLOG(@"Connection timed out");
    
    if (_errorCallback) {
        _errorCallback(RadarBleErrorConnectionTimeout, @"Connection to device timed out");
    }
    
    [self disconnect];
}

// 断开连接
- (void)disconnect {
    RDRLOG(@"Disconnecting device");
    
    // 取消所有定时器
    [_scanTimer invalidate];
    [_configTimer invalidate];
    [_connectTimer invalidate];
    [_queryTimer invalidate];
    
    _scanTimer = nil;
    _configTimer = nil;
    _connectTimer = nil;
    _queryTimer = nil;
    
    // 清理设备信息
    _currentPeripheral = nil;
    
    // 重置状态
    _isConnected = NO;
    _isConfiguring = NO;
    _isQuerying = NO;
    
    // 关闭BlufiClient
    if (_blufiClient) {
        [_blufiClient close];
        _blufiClient = nil;
    }
}

#pragma mark - 配置设备

// 配置设备WiFi和服务器
- (void)configureDevice:(DeviceInfo *)device
          serverAddress:(nullable NSString *)serverAddress
            serverPort:(NSInteger)serverPort
         serverProtocol:(nullable NSString *)serverProtocol
               wifiSsid:(nullable NSString *)wifiSsid
           wifiPassword:(nullable NSString *)wifiPassword
             completion:(RadarConfigCallback)completion {
    RDRLOG(@"Starting device configuration for: %@", device.deviceName);
    
    // 参数验证
    if (!device || !device.uuid) {
        RDRLOG(@"Error: Invalid device information");
        if (completion) {
            dispatch_async(dispatch_get_main_queue(), ^{
                completion(NO, @{@"error": @"Invalid device information"});
            });
        }
        return;
    }
    
    // 检查是否有有效的配置参数
    if ((!wifiSsid || wifiSsid.length == 0) && (!serverAddress || serverAddress.length == 0)) {
        RDRLOG(@"Error: No valid configuration parameters provided");
        if (completion) {
            dispatch_async(dispatch_get_main_queue(), ^{
                completion(NO, @{@"error": @"No valid configuration parameters provided"});
            });
        }
        return;
    }
    
    // 保存回调和配置参数
    _configCallback = completion;
    _currentDevice = device;
    _serverAddress = serverAddress;
    _serverPort = serverPort;
    _serverProtocol = serverProtocol;
    _wifiSsid = wifiSsid;
    _wifiPassword = wifiPassword;
    
    // 重置配置状态
    _configRetryCount = 0;
    _configServerSendStage = 0;
    _configServerResult = [NSMutableDictionary dictionary];
    
    // 设置配置超时
    [_configTimer invalidate];
    _configTimer = [NSTimer scheduledTimerWithTimeInterval:DEFAULT_CONFIG_TIMEOUT
                                                   target:self
                                                 selector:@selector(configurationTimedOut)
                                                 userInfo:nil
                                                  repeats:NO];
    
    _isConfiguring = YES;
    
    // 连接设备并进行配置
    [self connectAndConfigureDevice:device];
}

// 连接设备并执行配置
- (void)connectAndConfigureDevice:(DeviceInfo *)device {
    // 检查连接状态
    if (_isConnected && _blufiClient && 
        [_currentDeviceUUID isEqualToString:device.uuid]) {
        // 设备已连接，直接开始配置
        RDRLOG(@"Device already connected, proceeding with configuration...");
        [_blufiClient negotiateSecurity];
    } else {
        // 设备未连接，先连接
        RDRLOG(@"Device not connected, connecting first...");
        [self connectDevice:device];
        
        // 连接成功后，BlufiDelegate 的 onGattPrepared 会自动调用协商安全并配置
    }
}

// 发送WiFi配置
- (void)sendWifiConfiguration {
    RDRLOG(@"Sending WiFi configuration: SSID=%@", _wifiSsid);
    
    // 创建配置参数对象
    BlufiConfigureParams *params = [[BlufiConfigureParams alloc] init];
    params.opMode = OpModeSta;  // 设置为Station模式
    params.staSsid = _wifiSsid;
    params.staPassword = _wifiPassword ?: @"";
    
    // 发送配置
    [_blufiClient configure:params];
}

// 发送服务器配置
- (void)sendServerConfiguration {
    RDRLOG(@"Sending server configuration: %@:%ld", _serverAddress, (long)_serverPort);
    
    // 初始化结果字典
    [_configServerResult setObject:_currentDevice.deviceId forKey:@"deviceId"];
    [_configServerResult setObject:_currentDevice.uuid ?: @"" forKey:@"uuid"];
    
    // 发送服务器地址命令
    _configServerSendStage = 1;
    NSString *serverCmd = [NSString stringWithFormat:@"1:%@", _serverAddress];
    NSData *data = [serverCmd dataUsingEncoding:NSUTF8StringEncoding];
    
    if (data) {
        [_blufiClient postCustomData:data];
        RDRLOG(@"Server address command sent");
    } else {
        [self configurationDidFailWithError:@"Failed to encode server address command"];
    }
}

// 发送服务器端口命令
- (void)sendServerPortCommand {
    _configServerSendStage = 2;
    NSString *portCmd = [NSString stringWithFormat:@"2:%ld", (long)_serverPort];
    NSData *data = [portCmd dataUsingEncoding:NSUTF8StringEncoding];
    
    if (data) {
        [_blufiClient postCustomData:data];
        RDRLOG(@"Server port command sent");
    } else {
        [self configurationDidFailWithError:@"Failed to encode server port command"];
    }
}

// 发送额外命令
- (void)sendExtraCommands {
    _configServerSendStage = 3;
    NSData *extraCmd = [@"3:0" dataUsingEncoding:NSUTF8StringEncoding];
    
    if (extraCmd) {
        [_blufiClient postCustomData:extraCmd];
        RDRLOG(@"Extra command sent");
    } else {
        [self sendRestartCommand]; // 继续下一步
    }
}

// 发送重启命令
- (void)sendRestartCommand {
    _configServerSendStage = 4;
    NSData *restartCmd = [@"8:" dataUsingEncoding:NSUTF8StringEncoding];
    
    if (restartCmd) {
        [_blufiClient postCustomData:restartCmd];
        RDRLOG(@"Restart command sent");
        
        // 设置超时，如果没有收到响应，认为重启成功
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(5.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
            if (self->_configServerSendStage == 4 && self->_isConfiguring) {
                RDRLOG(@"No restart confirmation received, assuming device restarted");
                
                // 完成配置
                BOOL addressSuccess = [self->_configServerResult[@"serverAddressSuccess"] boolValue];
                BOOL portSuccess = [self->_configServerResult[@"serverPortSuccess"] boolValue];
                [self completeServerConfigWithSuccess:(addressSuccess || portSuccess)];
            }
        });
    } else {
        [self configurationDidFailWithError:@"Failed to encode restart command"];
    }
}

// 完成服务器配置
- (void)completeServerConfigWithSuccess:(BOOL)success {
    RDRLOG(@"Completing server configuration: success=%d", success);
    
    // 设置成功标志
    [_configServerResult setObject:@(success) forKey:@"success"];
    
    if (success) {
        [_configServerResult setObject:@"Server configuration completed" forKey:@"message"];
        
        // 更新设备信息
        _currentDevice.serverAddress = _serverAddress;
        _currentDevice.serverPort = _serverPort;
        _currentDevice.serverProtocol = _serverProtocol;
        _currentDevice.lastUpdateTime = [[NSDate date] timeIntervalSince1970];
    } else {
        [_configServerResult setObject:@"Server configuration failed" forKey:@"error"];
    }
    
    // 通知回调
    if (_configCallback) {
        dispatch_async(dispatch_get_main_queue(), ^{
            self->_configCallback(success, self->_configServerResult);
        });
    }
    
    // 清理状态
    _isConfiguring = NO;
    _configServerSendStage = 0;
    [_configTimer invalidate];
    _configTimer = nil;
}

// 配置失败处理
- (void)configurationDidFailWithError:(NSString *)error {
    RDRLOG(@"Configuration failed: %@", error);
    
    // 取消超时计时器
    [_configTimer invalidate];
    _configTimer = nil;
    
    // 创建结果字典
    NSMutableDictionary *result = [NSMutableDictionary dictionary];
    [result setObject:@(NO) forKey:@"success"];
    [result setObject:error forKey:@"error"];
    
    // 通知回调
    if (_configCallback) {
        dispatch_async(dispatch_get_main_queue(), ^{
            self->_configCallback(NO, result);
        });
    }
    
    // 清理状态
    _isConfiguring = NO;
    _configServerSendStage = 0;
}

// 配置超时处理
- (void)configurationTimedOut {
    [self configurationDidFailWithError:@"Configuration operation timed out"];
}

#pragma mark - 查询设备状态

// 查询设备状态
- (void)queryDeviceStatus:(DeviceInfo *)device
              completion:(RadarStatusCallback)completion {
    RDRLOG(@"Start querying device status for: %@, UUID: %@", device.deviceName, device.uuid);
    
    // 参数验证
    if (!device || !device.uuid) {
        RDRLOG(@"Error: Invalid device information");
        if (completion) {
            dispatch_async(dispatch_get_main_queue(), ^{
                completion(device, NO);
            });
        }
        return;
    }
    
    // 保存回调和设备信息
    _statusCallback = completion;
    _currentDevice = device;
    
    // 重置查询状态
    _isQueryComplete = NO;
    _hasWifiStatus = NO;
    _hasUID = NO;
    _hasMacAddress = NO;
    _isQuerying = YES;
    
    // 初始化状态字典
    _statusMap = [NSMutableDictionary dictionary];
    
    // 设置查询超时
    [_queryTimer invalidate];
    _queryTimer = [NSTimer scheduledTimerWithTimeInterval:DEFAULT_QUERY_TIMEOUT
                                                 target:self
                                               selector:@selector(queryTimedOut)
                                               userInfo:nil
                                                repeats:NO];
    
    // 连接设备并查询状态
    [self connectAndQueryDevice:device];
}

// 连接设备并执行查询
- (void)connectAndQueryDevice:(DeviceInfo *)device {
    // 检查连接状态
    if (_isConnected && _blufiClient && 
        [_currentDeviceUUID isEqualToString:device.uuid]) {
        // 设备已连接，直接开始查询
        RDRLOG(@"Device already connected, proceeding with query...");
        [_blufiClient negotiateSecurity];
    } else {
        // 设备未连接，先连接
        RDRLOG(@"Device not connected, connecting first...");
        [self connectDevice:device];
        
        // 连接成功后，BlufiDelegate 的 gattPrepared 会自动调用协商安全并查询
    }
}

// 查询超时处理
- (void)queryTimedOut {
    RDRLOG(@"Query operation timed out");
    
    // 如果查询正在进行且未完成
    if (_isQuerying && !_isQueryComplete) {
        // 尝试使用已有的部分数据完成查询
        [self finishQuery:(_hasUID || _hasMacAddress || _hasWifiStatus)];
    }
}

// 发送UID查询命令
- (void)sendUIDQuery {
    RDRLOG(@"Sending UID query command");
    NSData *uidCmd = [@"12:" dataUsingEncoding:NSUTF8StringEncoding];
    [_blufiClient postCustomData:uidCmd];
}

// 发送MAC地址查询命令
- (void)sendMACQuery {
    RDRLOG(@"Sending MAC address query command");
    NSData *macCmd = [@"65:" dataUsingEncoding:NSUTF8StringEncoding];
    [_blufiClient postCustomData:macCmd];
}

// 发送WiFi状态查询命令
- (void)sendWiFiStatusQuery {
    RDRLOG(@"Requesting device WiFi status");
    [_blufiClient requestDeviceStatus];
}

// 处理UID响应
- (void)handleUIDResponse:(NSString *)responseStr {
    NSArray *parts = [responseStr componentsSeparatedByString:@":"];
    if (parts.count >= 2) {
        NSString *uid = [parts objectAtIndex:1];
        uid = [uid stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
        
        [_statusMap setObject:uid forKey:@"uid"];
        _hasUID = YES;
        
        RDRLOG(@"Received device UID: %@", uid);
        
        // 将UID实时更新到设备信息并通知UI
        _currentDevice.uid = uid;
        
        // 实时通知主界面UID更新
        if (_statusCallback && !_isQueryComplete) {
            dispatch_async(dispatch_get_main_queue(), ^{
                self->_statusCallback(self->_currentDevice, YES);
            });
        }
        
        // 继续查询MAC地址
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
            [self sendMACQuery];
        });
    } else {
        RDRLOG(@"Invalid UID response format");
        
        // 继续查询MAC地址，不中断流程
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
            [self sendMACQuery];
        });
    }
}

// 处理MAC地址响应
- (void)handleMACResponse:(NSString *)responseStr {
    NSArray *parts = [responseStr componentsSeparatedByString:@":"];
    if (parts.count >= 3 && [@"0" isEqualToString:[parts objectAtIndex:1]]) {
        NSString *macAddress = [parts objectAtIndex:2];
        macAddress = [macAddress stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
        
        [_statusMap setObject:macAddress forKey:@"macAddress"];
        _hasMacAddress = YES;
        
        RDRLOG(@"Received device MAC address: %@", macAddress);
        
        // 将MAC地址实时更新到设备信息并通知UI
        _currentDevice.macAddress = macAddress;
        
        // 实时通知主界面MAC地址更新
        if (_statusCallback && !_isQueryComplete) {
            dispatch_async(dispatch_get_main_queue(), ^{
                self->_statusCallback(self->_currentDevice, YES);
            });
        }
        
        // 继续查询WiFi状态
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
            [self sendWiFiStatusQuery];
        });
    } else {
        RDRLOG(@"Invalid MAC address response format");
        
        // 继续查询WiFi状态，不中断流程
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
            [self sendWiFiStatusQuery];
        });
    }
}

// 完成查询
// 完成查询,更新设备信息并通知回调
- (void)finishQuery:(BOOL)success {
    if (_isQueryComplete) return;
    
    _isQueryComplete = YES;
    _isQuerying = NO;
    
    // 取消查询定时器
    [_queryTimer invalidate];
    _queryTimer = nil;
    
    // 更新设备信息 
    if (success) {
        // 更新UID
        if (_statusMap[@"uid"]) {
            _currentDevice.uid = _statusMap[@"uid"];
        }
        
        // 更新MAC地址
        if (_statusMap[@"macAddress"]) {
            _currentDevice.macAddress = _statusMap[@"macAddress"];
        }
        
        // 更新WiFi状态
        if (_statusMap[@"wifiOpMode"]) {
            _currentDevice.wifiMode = _statusMap[@"wifiOpMode"];
        }
        
        if (_statusMap[@"staConnected"]) {
            _currentDevice.wifiConnected = [_statusMap[@"staConnected"] boolValue];
        }
        
        if (_statusMap[@"staSSID"]) {
            _currentDevice.wifiSsid = _statusMap[@"staSSID"];
        }
        
        // 更新时间戳
        _currentDevice.lastUpdateTime = [[NSDate date] timeIntervalSince1970];
        
        RDRLOG(@"Query completed with success. UID:%@, MAC:%@, WiFi:%@", 
               _currentDevice.uid,
               _currentDevice.macAddress,
               _currentDevice.wifiMode);
    } else {
        RDRLOG(@"Query completed with partial data or failure");
    }
    
    // 通知回调
    if (_statusCallback) {
        dispatch_async(dispatch_get_main_queue(), ^{
            self->_statusCallback(self->_currentDevice, success);
        });
    }
    
    // 清理状态
    _statusMap = nil;
    _statusCallback = nil;
}

/**
 * 查询超时处理 
 */
- (void)queryTimedOut {
    RDRLOG(@"Query operation timed out");
    
    // 如果查询正在进行且未完成
    if (_isQuerying && !_isQueryComplete) {
        RDRLOG(@"Query timeout, checking partial results...");
        
        // 检查是否有部分数据可用
        BOOL hasPartialData = (_hasUID || _hasMacAddress || _hasWifiStatus);
        
        if (hasPartialData) {
            RDRLOG(@"Some data available (UID:%d, MAC:%d, WiFi:%d), returning partial results",
                   _hasUID, _hasMacAddress, _hasWifiStatus);
            [self finishQuery:YES]; // 返回部分数据
        } else {
            RDRLOG(@"No data available, query failed");
            [self finishQuery:NO]; // 完全失败
        }
    }
    
    // 如果需要,断开连接 
    if (_isQuerying) {
        [self disconnect];
    }
}
#pragma mark - CBCentralManagerDelegate Methods

// CBCentralManagerDelegate - 蓝牙状态变化回调 
- (void)centralManagerDidUpdateState:(CBCentralManager *)central {
    switch (central.state) {
        case CBManagerStatePoweredOn:
            RDRLOG(@"Bluetooth powered ON");
            break;
            
        case CBManagerStatePoweredOff:
            RDRLOG(@"Bluetooth powered OFF");
            // 蓝牙关闭时停止所有操作
            if (_isScanning) {
                [self stopScan];
            }
            if (_errorCallback) {
                _errorCallback(RadarBleErrorBluetoothDisabled, @"Bluetooth is powered off");
            }
            break;
            
        case CBManagerStateResetting:
            RDRLOG(@"Bluetooth is resetting");
            break;
            
        case CBManagerStateUnauthorized:
            RDRLOG(@"Bluetooth unauthorized");
            if (_errorCallback) {
                _errorCallback(RadarBleErrorBluetoothDisabled, @"Bluetooth is not authorized");
            }
            break;
            
        case CBManagerStateUnsupported:
            RDRLOG(@"Bluetooth not supported");
            if (_errorCallback) {
                _errorCallback(RadarBleErrorBluetoothDisabled, @"Bluetooth is not supported");
            }
            break;
            
        default:
            RDRLOG(@"Unknown bluetooth state: %ld", (long)central.state);
            break;
    }
}

// 发现外设回调
- (void)centralManager:(CBCentralManager *)central 
 didDiscoverPeripheral:(CBPeripheral *)peripheral 
     advertisementData:(NSDictionary<NSString *,id> *)advertisementData 
                  RSSI:(NSNumber *)RSSI {
    // 获取设备UUID
    NSString *uuid = peripheral.identifier.UUIDString;
    
    // 去重并保存peripheral到缓存中
    @synchronized(_peripheralCache) {
        if (_peripheralCache[uuid]) {
            return; // 已存在则跳过
        }
        _peripheralCache[uuid] = peripheral;
        RDRLOG(@"Cached peripheral for UUID: %@", uuid);
    }
    
    // 打印设备信息
    RDRLOG(@"Discovered peripheral - Name:%@, UUID:%@, RSSI:%@", 
           peripheral.name ?: @"Unknown", 
           uuid,
           RSSI); 
    
    // 创建设备信息对象
    DeviceInfo *deviceInfo = [[DeviceInfo alloc] initWithProductorName:ProductorRadarQL
                                                           deviceName:peripheral.name ?: @"Unknown"
                                                             deviceId:peripheral.name ?: @"Unknown" 
                                                           deviceType:nil
                                                              version:nil
                                                                  uid:nil
                                                          macAddress:nil
                                                                 uuid:uuid
                                                                 rssi:[RSSI integerValue]];
    
    // 通知扫描回调
    if (_scanCallback) {
        dispatch_async(dispatch_get_main_queue(), ^{
            self->_scanCallback(deviceInfo);
        });
    }
}

#pragma mark - BlufiDelegate Methods 

/**
 * GATT服务准备就绪回调
 */
- (void)blufi:(BlufiClient *)client 
  gattPrepared:(BlufiStatusCode)status 
       service:(CBService *)service 
    writeChar:(CBCharacteristic *)writeChar 
   notifyChar:(CBCharacteristic *)notifyChar {
    
    if (status != StatusSuccess || !service || !writeChar || !notifyChar) {
        RDRLOG(@"GATT service prepare failed: status=%d", status);
        if (_isConfiguring) {
            [self configurationDidFailWithError:@"Failed to prepare GATT service"];
        } else if (_isQuerying) {
            [self finishQuery:NO];
        }
        return;
    }
    
    RDRLOG(@"GATT service prepared successfully");
    
    // 开始安全协商
    [client negotiateSecurity];
}

/**
 * 安全协商结果回调
 */
- (void)blufi:(BlufiClient *)client didNegotiateSecurity:(BlufiStatusCode)status {
    RDRLOG(@"Security negotiation result: %d", status);
    
    if (status != StatusSuccess) {
        _errorCount++;
        
        if (_errorCount < 3) {
            // 最多重试2次
            RDRLOG(@"Security negotiation failed, retrying... (attempt %ld/3)", (long)_errorCount);
            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
                [client negotiateSecurity];
            });
            return;
        }
        
        // 重试失败,通知错误
        if (_isConfiguring) {
            [self configurationDidFailWithError:@"Security negotiation failed"];
        } else if (_isQuerying) {
            [self finishQuery:NO];
        }
        return;
    }
    
    // 安全协商成功,重置错误计数
    _errorCount = 0;
    
    // 根据当前操作类型继续执行
    if (_isConfiguring) {
        if (_wifiSsid) {
            [self sendWifiConfiguration];
        } else if (_serverAddress) {
            [self sendServerConfiguration];
        }
    } else if (_isQuerying) {
        [self sendUIDQuery];
    }
}

/**
 * WiFi配置结果回调
 */
- (void)blufi:(BlufiClient *)client didPostConfigureParams:(BlufiStatusCode)status {
    if (!_isConfiguring) return;
    
    BOOL success = (status == StatusSuccess);
    
    // 创建结果字典
    NSMutableDictionary *result = [NSMutableDictionary dictionary];
    [result setObject:@(success) forKey:@"success"];
    
    if (success) {
        RDRLOG(@"WiFi configuration successful");
        [result setObject:@"WiFi configuration successful" forKey:@"message"];
        
        // 更新设备信息
        _currentDevice.wifiSsid = _wifiSsid;
        _currentDevice.wifiPassword = _wifiPassword;
        _currentDevice.lastUpdateTime = [[NSDate date] timeIntervalSince1970];
        
        // 如果还需要配置服务器
        if (_serverAddress && _serverPort > 0) {
            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
                [self sendServerConfiguration];
            });
        }
    } else {
        RDRLOG(@"WiFi configuration failed: %d", status);
        [result setObject:@"WiFi configuration failed" forKey:@"error"];
    }
    
    // 通知回调
    if (_configCallback) {
        dispatch_async(dispatch_get_main_queue(), ^{
            self->_configCallback(success, result);
        });
    }
}

/**
 * 设备状态响应回调
 */
- (void)blufi:(BlufiClient *)client 
didReceiveDeviceStatusResponse:(nullable BlufiStatusResponse *)response 
        status:(BlufiStatusCode)status {
    
    if (_isQuerying && !_isQueryComplete) {
        if (status == StatusSuccess && response) {
            // 更新 WiFi 模式
            NSString *wifiMode = @"Unknown";
            switch (response.opMode) {
                case OpModeNull:
                    wifiMode = @"NULL";
                    break;
                case OpModeSta:
                    wifiMode = @"STA";
                    break;
                case OpModeSoftAP:
                    wifiMode = @"SOFTAP";
                    break;
                case OpModeStaSoftAP:
                    wifiMode = @"STASOFTAP";
                    break;
                default:
                    wifiMode = [NSString stringWithFormat:@"UNKNOWN(%d)", response.opMode];
                    break;
            }
            [_statusMap setObject:wifiMode forKey:@"wifiOpMode"];
            
            // 记录连接状态
            if (response.opMode == OpModeSta || response.opMode == OpModeStaSoftAP) {
                BOOL isConnected = [response isStaConnectWiFi];
                [_statusMap setObject:@(isConnected) forKey:@"staConnected"];
                
                if (response.staSsid) {
                    [_statusMap setObject:response.staSsid forKey:@"staSSID"];
                }
            }
            
            _hasWifiStatus = YES;
            
            // 查询完成,返回结果
            [self finishQuery:YES];
            
        } else {
            RDRLOG(@"Failed to get device WiFi status: %d", status);
            [self finishQuery:(_hasUID || _hasMacAddress)];
        }
    }
}

/**
 * 自定义数据响应处理
 */ 
- (void)blufi:(BlufiClient *)client didReceiveCustomData:(NSData *)data status:(BlufiStatusCode)status {
    if (status != StatusSuccess || !data) {
        RDRLOG(@"Failed to receive custom data: status=%d", status);
        
        if (_isQuerying && !_isQueryComplete) {
            [self finishQuery:(_hasUID || _hasMacAddress || _hasWifiStatus)];
        }
        return;
    }
    
    // 解析响应数据
    NSString *responseStr = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
    if (![responseStr containsString:@":"]) {
        RDRLOG(@"Invalid response format: %@", responseStr);
        return;
    }
    
    // 分析命令类型
    NSArray *parts = [responseStr componentsSeparatedByString:@":"];
    NSInteger command = [[parts objectAtIndex:0] integerValue];
    
    // 根据命令类型处理
    switch (command) {
        case 12: // UID 查询响应
            if (_isQuerying) {
                [self handleUIDResponse:responseStr];
            }
            break;
            
        case 65: // MAC 地址查询响应
            if (_isQuerying) {
                [self handleMACResponse:responseStr];
            }
            break;
            
        case 1:  // 服务器地址配置响应
        case 2:  // 服务器端口配置响应 
        case 3:  // 额外配置命令响应
        case 8:  // 重启命令响应
            if (_isConfiguring) {
                [self handleConfigResponse:command parts:parts];
            }
            break;
            
        default:
            RDRLOG(@"Unknown command response: %ld", (long)command);
            break;
    }
}

/**
 * 处理配置命令响应
 */
- (void)handleConfigResponse:(NSInteger)command parts:(NSArray *)parts {
    if (!_isConfiguring || parts.count < 2) return;
    
    BOOL success = [@"0" isEqualToString:parts[1]];
    NSString *cmdName = @"Unknown";
    
    switch (command) {
        case 1:
            cmdName = @"ServerAddress";
            [_configServerResult setObject:@(success) forKey:@"serverAddressSuccess"];
            if (success) {
                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(DEFAULT_COMMAND_DELAY * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
                    [self sendServerPortCommand];
                });
            }
            break;
            
        case 2:
            cmdName = @"ServerPort";
            [_configServerResult setObject:@(success) forKey:@"serverPortSuccess"];
            if (success) {
                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(DEFAULT_COMMAND_DELAY * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
                    [self sendExtraCommands];
                });
            }
            break;
            
        case 3:
            cmdName = @"ExtraCommand";
            if (success) {
                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(DEFAULT_COMMAND_DELAY * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
                    [self sendRestartCommand];
                });
            }
            break;
            
        case 8:
            cmdName = @"RestartCommand";
            [_configServerResult setObject:@"true" forKey:@"deviceRestarted"];
            if (success) {
                // 检查整体配置结果
                BOOL addressSuccess = [_configServerResult[@"serverAddressSuccess"] boolValue];
                BOOL portSuccess = [_configServerResult[@"serverPortSuccess"] boolValue];
                [self completeServerConfigWithSuccess:(addressSuccess || portSuccess)];
            }
            break;
    }
    
    RDRLOG(@"%@ command %@: %@", cmdName, success ? @"succeeded" : @"failed", parts[1]);
}

/**
 * 错误回调
 */
- (void)blufi:(BlufiClient *)client didReceiveError:(NSInteger)errCode {
    RDRLOG(@"Received error: %ld", (long)errCode);
    
    _errorCount++;
    
    // 根据错误码处理
    RadarBleErrorType errorType;
    NSString *errorMessage;
    
    switch (errCode) {
        case 100:
        case 101:
            errorType = RadarBleErrorConnectionTimeout;
            errorMessage = @"Connection timeout or lost";
            break;
            
        case 102:
        case 103:
            errorType = RadarBleErrorSecurityNegotiation;
            errorMessage = @"Security negotiation failed";
            break;
            
        case 104:
        case 105:
            errorType = RadarBleErrorDataTransmission;
            errorMessage = @"Data transmission error";
            break;
            
        default:
            errorType = RadarBleErrorUnknown;
            errorMessage = [NSString stringWithFormat:@"Unknown error: %ld", (long)errCode];
            break;
    }
    
    // 通知错误
    if (_errorCallback) {
        _errorCallback(errorType, errorMessage);
    }
    
    // 处理当前操作失败
    if (_isConfiguring) {
        [self configurationDidFailWithError:errorMessage];
    } else if (_isQuerying) {
        [self finishQuery:NO];
    }
}

@end